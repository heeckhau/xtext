«REM»
/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::generator::GeneratorExtensions»
«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::grammarAccess::GrammarAccess»


«DEFINE addToPluginXmlRt(Boolean generatorStub, Boolean mwe, Boolean javaMain) FOR Grammar»«ENDDEFINE»

«DEFINE addToPluginXmlUi(Boolean generatorStub, Boolean mwe, Boolean javaMain) FOR Grammar»
   <extension
         point="org.eclipse.xtext.builder.participant">
      <participant
            class="«executableExtensionFactory()»:org.eclipse.xtext.builder.IXtextBuilderParticipant">
      </participant>
   </extension>
   <extension
            point="org.eclipse.ui.preferencePages">
        <page
            category="«name»"
            class="«executableExtensionFactory()»:org.eclipse.xtext.builder.preferences.BuilderPreferencePage"
            id="«name».builder.preferencePage"
            name="Compiler">
            <keywordReference id="«name.toJavaPackage() + ".ui.keyword_"+name.toSimpleName()»"/>
        </page>
    </extension>
«ENDDEFINE»

«DEFINE addToStandaloneSetup(Boolean generatorStub, Boolean mwe, Boolean javaMain) FOR Grammar»«ENDDEFINE»

«DEFINE generate(Boolean generatorStub, Boolean mwe, Boolean javaMain) FOR Grammar»
«IF generatorStub»
«FILE generatorName().asPath()+".xtend" SRC-»
/*
 «fileHeader()»
 */
package «generatorName().toJavaPackage()»

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

class «generatorName().toSimpleName()» implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//TODO implement me
	}
}
«ENDFILE»
«ENDIF»

«IF mwe»
«FILE generatorName().asPath()+"MWE.mwe2" SRC»
module «generatorName()»MWE

import org.eclipse.emf.mwe.utils.*

var targetDir
var modelPath

Workflow {

	component = org.eclipse.xtext.mwe.Reader {
		// lookup all resources on the classpath
		// useJavaClassPath = true

		// or define search scope explicitly
		path = modelPath

		// this class will be generated by the xtext generator 
		register = «this.name»StandaloneSetup {}
		loadResource = {
			slot = "model"
		}
	}

	component = org.eclipse.xtext.generator.GeneratorComponent {
		register = «this.name»StandaloneSetup {}
		slot = 'model'
		outlet = {
			path = targetDir
		}
	}
}
«ENDFILE»
«ENDIF»

«IF javaMain»
«FILE generatorName().toJavaPackage().asPath()+"/Main.java" SRC»
/*
 «fileHeader()»
 */
package «generatorName().toJavaPackage()»;

import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {
	
	public static void main(String[] args) {
		if (args.length==0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new «setupImpl()»().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0]);
	}
	
	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	@Inject
	private IGenerator generator;
	
	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string) {
		// load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createURI(string), true);
		
		// validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		
		// configure and start the generator
		fileAccess.setOutputPath("src-gen/");
		generator.doGenerate(resource, fileAccess);
		
		System.out.println("Code generation finished.");
	}
}
«ENDFILE»
«ENDIF»
«ENDDEFINE»